Slartichook
  What powers this web site.

  Languages: Python, Javascript
  Technologies: Django, jQuery, Google App Engine
  My Roles: Backend, front-end Javascript, markup, CSS
  Show Me: View the live site : http://slashdot.org, View the source code : http://github.com
  Images: map.png, map.png, map.png, map.png

  In developing my portfolio, I sought to present considerable information
  without compromising usability. Stymied by my own graphic design ineptitude,
  I turned to my graphic designer friend [Alex
  Swanson](http://alexswanson.net/), who crafted a beautiful design around
  which I could structure this site.

  Building on my favoured platform of Django, I deployed on Google App Engine
  to reduce concerns of hosting and reliability, and to gain more experience
  working with non-relational databases. My focus throughout the project was on
  elegance and usability, with Javascript used to subtly enhance the user
  experience. Rather than draw on pre-built jQuery effects, I painstakingly
  rolled my own novel ones, such as the transition between active elements in
  the project list.


Alexswan
  The backend for a friend's portfolio.

  Languages: Python, Javascript
  Technologies: Django, jQuery
  My Roles: Backend, front-end Javascript

  I wrote the backend for my graphic designer friend [Alex
  Swanson](http://alexswanson.net)'s portfolio, encompassing a blog, work
  showcase, and contact form. Building on Django, I leveraged its built-in
  admin section, commenting support, RSS/Atom generation, and sitemap creator
  to provide a great deal of functionality without writing reams of code.

  Also notable is our subtle enhancement of the user experience via Javascript,
  most evident in the [Work section](http://alexswanson.net/work/).


Gee Pee
  A genetic programming system.

  Languages: Javascript
  Techonlogies: HTML5 Web Workers, HTML5 Canvas

  Gee Pee is a ruidimentary genetic programming system that strives to produce
  a mathematical expression approximating the trigonometric function
  f(x)=sin(x) over a given domain, using only the four arithmetical operators.
  Written entirely in Javascript, Gee Pee runs in a web browser and takes
  advantage of HTML5's Canvas and Web Workers -- the former permits graphical
  rendering of its progress in real time, while the latter allows its intensive
  computations to run in a separate thread, maintaining a responsive user
  interface.

  Gee Pee is based on the techniques presented in
  [_A Field Guide to Genetic Programming_](http://www.gp-field-guide.org.uk/).


Towers of Hanoi
  The classic math puzzle.

  Languages: Javascript
  Technologies: HTML5 Canvas

  Towers of Hanoi is an implementation of the classic Towers of Hanoi puzzle
  using HTML5 Canvas.  Given the ability to play with a user-specified number
  of disks, the user quickly gains an appreciation for how the number of steps
  required to reach a solution grows exponentially with the number of disks. As
  my first project exploiting Canvas, it opened my eyes to the possibilities
  offered by HTML5, which previously required Flash.


Twitinerary
  A tweet scheduler.

  Languages: Python, Javascript
  Technologies: Google App Engine, Django, jQuery, jQuery UI
  My Roles: Backend, front-end

  Twitinerary is a tweet scheduler built on Google App Engine and Django, which
  I created in collaboration with my designer friend [Alex
  Swanson](http://alexswanson.net/). Based on his desire for a simple but
  graceful tweet scheduler, I wrote a rough prototype as a means of learning
  App Engine, then gradually fleshed it out based on brainstorming sessions
  with Alex. Though we planned to integrate a user interface created by Alex
  and deploy the app to the masses, we abandoned Twitinerary for other projects
  before reaching completion.

  My focus throughout the project was on building a rich user interface using
  jQuery UI, eliminating transitions between pages. Noteworthy is Twitinerary's
  time handling, which deals solely in the user's local time zone URL
  shortening and image uploading support are built-in.

  A prime challenge in building Twitinerary was to interface with Twitter's
  OAuth API. Beginning from a base of Mike Knapp's
  [AppEngine-OAuth-Library](http://github.com/mikeknapp/AppEngine-OAuth-Library/),
  I rewrote most of the code as I became intimately familiar with OAuth, fixing
  a number of bugs and adding new functionality as I went.


Ts3Query
  A TeamSpeak status monitor.

  Languages: Python, Javascript
  Technologies: web.py, jQuery

  Ts3Query is a webapp that lists users connected to a server for the VOIP
  application [TeamSpeak 3](http://teamspeak.com/). Developed to scratch my own
  itch, I built on web.py, which let me work in Python without imposing the
  overhead of a larger framework. Though the user interface was clearly
  designed by a programmer, the underlying library which interfaces with
  Teamspeak's query interface is both robust and flexible.


Capribup
  A backup script.

  Languages: Ruby

  Capribup is a backup script capable of archiving directory trees or
  PostgreSQL databases. Intended to be run periodically as a cronjob, Capribup
  has the user specify a ruleset describing by age what backups should be kept.
  It thus avoids the pitfall common to many simple backup systems, in which
  only a few of the most recent backups are kept, meaning that an error
  introduced into your data that predates your most recent backup is
  unrecoverable. Capribup instead encourages the user to retain more extensive
  backups -- one can, for example, keep a backup from six months ago, one from
  a month ago, and ones from each of the last five days.

  Though Capribup is limited to backing up directory trees and PostgreSQL
  databases, it could easily be extended to also deal with other data sources.
  The name is derived from the notion of a capricious backup agent, which I
  always found inordinately amusing, given that capricousness would perhaps be
  one of the least desireable qualities in a backup utility.


Shoutcast Recorder
  A streaming audio recorder.

  Languages: Ruby

  Shoutcast Recorder is a command-line Ruby application that allows one to
  record audio streamed from Shoutcast servers, based on a finite state
  machine. Using metadata broadcast by the server, recorded audio is broken up
  into files corresponding to individual tracks, allowing one to listen to
  broadcast music when he lacks Internet connectivity. The user may specify the
  amount of audio to be recorded either by duration or by cumulative file size.


Cathy Parser
  A querier for file index records.

  Languages: Python

  Cathy Parser queries the records produced by [Cathy](http://www.mtg.sk/rva/),
  a file-indexing application helpful in cataloguing files stored on removeable
  media. Back in my Windows-using days, I had indexed several hundred discs,
  but found myself unable to use the resulting records from the Linux
  command-line environment that I now prefer. As Cathy stores its records in an
  undocumented binary blob, I reverse-engineered its file format and
  implemented a parser in Python.


Computing Systems Exercises
  Solutions for computer-building book.

  Languages: Python, book-specific hardware description language

  [_The Elements of Computing Systems_](http://www1.idc.ac.il/tecs/) is a book
  that has the reader build a computer architecture in software, starting with
  only a NAND and DFF gate and culminating in creating a Java-like OOP
  programming language. Each chapter focuses on one layer of the architecture,
  with the user building his own implementation at the chapter's end. Given the
  book's expansive focus, its treatment of each topic is necessarily brief, but
  it still succeeded in granting me an appreciation of how the simplest logical
  elements give rise to the wonderful complexity of the modern computer.
  Futhermore, the book demonstrated excellent use of test-driven development,
  for test scripts accompanied each project, with the reader encouraged to
  iterate until his implementation passes all tests.

  My implementations of the book's earlier projects, such as rudimentary logic
  gates and an arithmetical logic unit, are written in the book's own hardware
  description language, with later projects, such as an assembler, developed in
  Python.
